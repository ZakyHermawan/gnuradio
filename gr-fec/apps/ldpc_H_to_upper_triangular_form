#!/usr/bin/env python
#
# Copyright 2015 Free Software Foundation, Inc.
#
# This file is part of GNU Radio
#
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
#

import numpy, sys
from gnuradio import fec
from gnuradio.fec import LDPC
from optparse import OptionParser

def main():
    parser = OptionParser(usage="%prog: [options] alist_in alist_out")
    parser.add_option("-n", "--iterations", dest="niters", type="int",
                      default=100,  help="Set number of iterations in greedy algorithm [default=%default]")
    parser.add_option("-v", "--verbose", dest="verbose", action="count",
                      help="Turn on verbose mode")

    (options, args) = parser.parse_args()
    print options

    if(len(args) < 2):
        sys.stderr.write("Please provide an input and output file.")
        sys.exit(1)

    try:
        file_in = open(args[0], 'r')
    except:
        sys.stderr.write("Could not open input file '{0}'".format(file_in))
        sys.exit(1)

    file_in.close()

    H = LDPC.read_alist_file(args[0])
    H_fr = LDPC.get_full_rank_H_matrix(H, verbose=options.verbose)
    ret = LDPC.get_best_matrix(H_fr, numIterations=options.niters,
                               verbose=options.verbose)
    if ret:
        H_utf = ret[0]
        g = ret[1]
        print H_utf
        print g
        #write_alist_file(args[1], H_utf)
    else:
        sys.stderr.write("Could not find an appropriate upper " \
                         "triangular form for H.\n")
        sys.exit(1)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
