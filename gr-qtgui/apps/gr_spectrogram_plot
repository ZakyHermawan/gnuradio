#!/usr/bin/env python
#
# Copyright 2012 Free Software Foundation, Inc.
#
# This file is part of GNU Radio
#
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
#

from gnuradio import gr
from gnuradio.eng_option import eng_option
from optparse import OptionParser
import os, sys

try:
    from gnuradio import qtgui
    from PyQt4 import QtGui, QtCore
    import sip
except ImportError:
    print "Error: Program requires PyQt4 and gr-qtgui."
    sys.exit(1)

import scipy

def read_samples_and_buffer(filename, size):
    fhandle = open(filename, 'r')
    data = scipy.fromfile(fhandle, dtype=scipy.complex64, count=size)
    print len(data)
    data = data.tolist()
    data += (10*size - len(data)) * [complex(0,0)]
    fhandle.close()
    return data

class my_top_block(gr.top_block):
    def __init__(self, filelist, fc, samp_rate, psdsize, start, nsamples):
        gr.top_block.__init__(self)

        self._filelist = filelist
        self._center_freq = fc
        self._samp_rate = samp_rate
        self._psd_size = psdsize
        self._start = start
        self._nsamps = nsamples
        self._nsigs = len(self._filelist)

        self.qapp = QtGui.QApplication(sys.argv)

        self.skip = gr.skiphead(gr.sizeof_gr_complex, self._start)
        self.head = gr.head(gr.sizeof_gr_complex, self._nsamps)
        self.gui_snk = qtgui.waterfall_sink_c(self._psd_size, gr.firdes.WIN_BLACKMAN_hARRIS,
                                              self._center_freq, self._samp_rate,
                                              "GNU Radio Spectrogram Plot", self._nsigs)
        n = 0
        self.srcs = list()
        for f in filelist:
            # If we don't have enough data to create a full plot, read
            # into a vector source and pad
            if(self._nsamps < self._psd_size):
                data = read_samples_and_buffer(f, self._psd_size)
                self.srcs.append(gr.vector_source_c(data))
            else:
                self.srcs.append(gr.file_source(gr.sizeof_gr_complex, f))

            # Set default labels based on file names
            #self.gui_snk.set_title(n, "{0}".format(f))
            n += 1

        self.connect(self.srcs[0], self.skip)
        self.connect(self.skip, self.head)
        self.connect(self.head, (self.gui_snk, 0))

        for i,s in enumerate(self.srcs[1:]):
            self.connect(s, (self.gui_snk, i+1))

        self.gui_snk.set_update_time(0);

        # Get Python Qt references
        pyQt  = self.gui_snk.pyqwidget()
        pyWin = sip.wrapinstance(pyQt, QtGui.QWidget)
	pyWin.show()        

def main():
    description = "Plots the spectrogram (waterfall) of a list of files."
    parser = OptionParser(option_class=eng_option, description=description,
                          conflict_handler="resolve")
    parser.add_option("-N", "--nsamples", type="int", default=None,
                      help="Set the number of samples to display [default=prints entire file]")
    parser.add_option("-S", "--start", type="int", default=0,
                      help="Starting sample number [default=%default]")
    parser.add_option("-L", "--psd-size", type="int", default=2048,
                      help="Set the FFT size of the PSD [default=%default]")
    parser.add_option("-f", "--center-frequency", type="eng_float", default=0.0,
                      help="Set the center frequency of the signal [default=%default]")
    parser.add_option("-r", "--sample-rate", type="eng_float", default=1.0,
                      help="Set the sample rate of the signal [default=%default]")
    (options, args) = parser.parse_args()

    if(len(args) < 1):
        parser.print_help()
        sys.exit(0)

    filelist = list(args)

    # Use the user-specified number of samples for all files if given;
    # otherwise, find the number of samples in all files and use the
    # largest value for everyone.
    nsamples = options.nsamples
    if(nsamples is None):
        filesizes = []
        for f in filelist:
            if(os.path.exists(f)):
                filesizes.append(os.path.getsize(f) / gr.sizeof_gr_complex)
        nsamples = max(filesizes)

    tb = my_top_block(filelist,
                      options.center_frequency, options.sample_rate,
                      options.psd_size,
                      options.start, nsamples);
    tb.start()
    tb.qapp.exec_()
    tb.stop()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
        
