;;; -*- Scheme -*-
;;;
;;; Copyright 2010 Free Software Foundation, Inc.
;;;
;;; This file is part of GNU Radio
;;;
;;; GNU Radio is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3, or (at your option)
;;; any later version.
;;;
;;; GNU Radio is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;;;

;;; If you're using Emacs's Scheme mode:
;;;   (put 'with-test-prefix 'scheme-indent-function 1)

;;; See the comments in gnuradio/test-suite/lib.scm for info on writing tests.
;;; See also the very end of the file, where the test-equal, test-eqv
;;; and test-eq macros are defined.

(use-modules (gnuradio test-suite lib))
(use-modules (gnuradio core))
(use-modules (oop goops))

;;; Return #t if x is not #f
(define (true? x)
  (and x #t))

;;; Add test code for all constructors in these files

;;; ./general/gr_additive_scrambler_bb.h
(pass-if (true? (gr:additive-scrambler-bb 0 0 0 0)))

;; Here's one that will throw if its arg is 0
(pass-if (true? (gr:unpack-k-bits-bb 10)))
(pass-if-throw "confirm throw gr:unpack-k-bits-bb" #t (true? (gr:unpack-k-bits-bb 0)))

;;; ./general/gr_agc2_cc.h
(pass-if (true? (gr:agc2-cc 1e-1 1e-2 1.0 1.0 0.0)))

;;; ./general/gr_agc2_ff.h
(pass-if (true? (gr:agc2-ff 0 0 0 0 0)))

;;; ./general/gr_agc_cc.h
(pass-if (true? (gr:agc-cc 0 0 0 0)))

;;; ./general/gr_agc_ff.h
(pass-if (true? (gr:agc-ff 0 0 0 0)))

;;; ./general/gr_align_on_samplenumbers_ss.h
(pass-if (true? (gr:align-on-samplenumbers-ss 2 128)))
(pass-if-throw "confirm throw gr:align-on-samplenumbers-ss" #t (true? (gr:align-on-samplenumbers-ss 0 0)))

;;; ./general/gr_bin_statistics_f.h
;; (pass-if (true? (gr:bin-statistics-f 0 0 0 0 0))) FIXME: not found

;;; ./general/gr_binary_slicer_fb.h
(pass-if (true? (gr:binary-slicer-fb)))

;;; ./general/gr_bytes_to_syms.h
(pass-if (true? (gr:bytes-to-syms)))

;;; ./general/gr_char_to_float.h
(pass-if (true? (gr:char-to-float)))

;;; ./general/gr_check_counting_s.h
;; (pass-if (true? (gr:check-counting-s false))) FIXME: not found

;;; ./general/gr_check_lfsr_32k_s.h
;; (pass-if (true? (gr:check-lfsr-2k-s))) FIXME: not found

;;; ./general/gr_clock_recovery_mm_cc.h
(pass-if (true? (gr:clock-recovery-mm-cc 1 1 1 1 1)))
;; (pass-if-throw "confirm throw gr:clock-recovery-mm-cc" #t (true? (gr:clock-recovery-mm-cc 0 0 0 0 0))) FIXME: segfault

;;; ./general/gr_clock_recovery_mm_ff.h
(pass-if (true? (gr:clock-recovery-mm-ff 1 1 1 1 1)))
;; (pass-if-throw "confirm throw gr:clock-recovery-mm-ff" #t (true? (gr:clock-recovery-mm-ff 0 0 0 0 0))) ;; FIXME: segfault

;;; ./general/gr_complex_to_interleaved_short.h
(pass-if (true? (gr:complex-to-interleaved-short)))

;;; ./general/gr_complex_to_xxx.h FIXME: all throw
;; (pass-if (true? (gr:complex-to-float 0)))
;; (pass-if (true? (gr:complex-to-real 0)))
;; (pass-if (true? (gr:complex-to-imag 0)))
;; (pass-if (true? (gr:complex-to-mag 0)))
;; (pass-if (true? (gr:complex-to-mag-squared 0)))
;; (pass-if (true? (gr:complex-to-arg 0)))

;;; ./general/gr_conjugate_cc.h
(pass-if (true? (gr:conjugate-cc)))

;;; ./general/gr_constellation_decoder_cb.h
;gr_constellation_decoder_cb (const std::vector<gr_complex> &sym_position, 
;                               const std::vector<unsigned char> &sym_value_out);
;; (pass-if (true? (gr:constellation_decoder_cb )))

;;; ./general/gr_copy.h
;; (pass-if (true? (gr:copy 0))) FIXME: throws

;;; ./general/gr_correlate_access_code_bb.h
(pass-if (true? (gr:correlate-access-code-bb "foo" 0)))
;; (pass-if-throw "confirm throw correlate-access-code-bb" #t (true? (gr:correlate-access-code-bb "foo" -1))) FIXME: throws

;;; ./general/gr_costas_loop_cc.h
(pass-if (true? (gr:costas-loop-cc 0 0 0 0 2)))
(pass-if-throw "confirm throw gr:costas-loop-cc" #t (true? (gr:costas-loop-cc 0 0 0 0 3)))

;;; ./general/gr_cpfsk_bc.h
;; (pass-if (true? (gr:cpfsk-bc 0 0 0))) FIXME: throws

;;; ./general/gr_ctcss_squelch_ff.h
;; (pass-if (true? (gr:ctcss-squelch-ff 0 0 0 0 0 true))) FIXME: not found

;;; ./general/gr_decode_ccsds_27_fb.h
(pass-if (true? (gr:decode-ccsds-27-fb)))

;;; ./general/gr_deinterleave.h
;; (pass-if (true? (gr:deinterleave 0))) FIXME: throws

;;; ./general/gr_delay.h
;; (pass-if (true? (gr:delay 0 0))) FIXME: throws
 
;;; ./general/gr_descrambler_bb.h
(pass-if (true? (gr:descrambler-bb 0 0 0)))

;;; ./general/gr_diff_decoder_bb.h
(pass-if (true? (gr:diff-decoder-bb 0)))

;;; ./general/gr_diff_encoder_bb.h
(pass-if (true? (gr:diff-encoder-bb 0)))

;;; ./general/gr_diff_phasor_cc.h
(pass-if (true? (gr:diff-phasor-cc)))

;;; ./general/gr_dpll_bb.h
(pass-if (true? (gr:dpll-bb 0 0)))

;;; ./general/gr_encode_ccsds_27_bb.h
(pass-if (true? (gr:encode-ccsds-27-bb)))

;;; ./general/gr_fake_channel_coder_pp.h
;; (pass-if (true? (gr:fake-channel-coder-pp 1 1))) FIXME: not found
;; (pass-if-throw "confirm throw" #t (true? (gr:fake-channel-coder-pp -1 1)))

;;; ./general/gr_feedforward_agc_cc.h
;; (pass-if (true? (gr:feedforward-agc-cc 0 0))) FIXME: throws

;;; ./general/gr_fft_vcc.h
;; gr_fft_vcc (int fft_size, bool forward, const std::vector<float> &window, bool shift);
;; (pass-if (true? (gr:fft-vcc )))

;;; ./general/gr_fft_vcc_fftw.h
;; gr_make_fft_vcc_fftw (int fft_size, bool forward, const std::vector<float> &window, bool shift);
;; (pass-if (true? (gr:fft-vcc-fftw )))

;;; ./general/gr_fft_vfc.h
;; bool set_window(const std::vector<float> &window);
;; (pass-if (true? (gr:fft_vfc )))

;;; ./general/gr_fll_band_edge_cc.h
(pass-if (true? (gr:fll-band-edge-cc 0 0 0 0 0)))

;; ;;; ./general/gr_float_to_char.h
(pass-if (true? (gr:float-to-char)))

;; ;;; ./general/gr_float_to_complex.h
;; (pass-if (true? (gr:float-to-complex 0))) FIXME: throws

;;; ./general/gr_float_to_short.h
(pass-if (true? (gr:float-to-short)))

;;; ./general/gr_float_to_uchar.h
(pass-if (true? (gr:float-to-uchar)))

;;; ./general/gr_fmdet_cf.h
(pass-if (true? (gr:fmdet-cf 0 0 0 0)))

;;; ./general/gr_framer_sink_1.h
;; (pass-if (true? (gr:framer-sink-1))) FIXME: not found

;;; ./general/gr_frequency_modulator_fc.h
(pass-if (true? (gr:frequency-modulator-fc 0)))

;;; ./general/gr_glfsr_source_b.h
;; (pass-if (true? (gr: glfsr-source-b 0 true 0 0))) FIXME: not found
;; (pass-if-throw "confirm throw" #t (true? (gr:glfsr_source_b 33 true 0 0)))

;;; ./general/gr_glfsr_source_f.h
;; (pass-if (true? (gr:glfsr-source-f 0 true 0 0))) FIXME: not found
;; (pass-if-throw "confirm throw" #t (true? (gr:glfsr_source_f 33 true 0 0)))

;;; ./general/gr_head.h
;; (pass-if (true? (gr:head 0 0))) FIXME: throws

;;; ./general/gr_interleave.h
;; (pass-if (true? (gr:interleave 0))) FIXME: throws

;;; ./general/gr_interleaved_short_to_complex.h
(pass-if (true? (gr:interleaved-short-to-complex)))

;;; ./general/gr_iqcomp_cc.h
;; (pass-if (true? (gr:iqcomp-cc 0 0))) FIXME: not found

;;; ./general/gr_keep_one_in_n.h
;; (pass-if (true? (gr:keep-one-in-n 0 0))) FIXME: throws

;;; ./general/gr_kludge_copy.h
;; (pass-if (true? (gr:kludge-copy 0))) FIXME: throws

;;; ./general/gr_lfsr_32k_source_s.h
(pass-if (true? (gr:lfsr-32k-source-s)))

;;; ./general/gr_lms_dfe_cc.h
;; (pass-if (true? (gr:lms-dfe-ff 0 0 0 0))) FIXME: hangs

;;; ./general/gr_lms_dfe_ff.h
;; (pass-if (true? (gr:lms-dfe-ff 0 0 0 0))) FIXME: hangs

;;; ./general/gr_map_bb.h
;; gr_map_bb (const std::vector<int> &map);
;; (pass-if (true? (gr:map-bb xx)))

;;; ./general/gr_mpsk_receiver_cc.h
;; (pass-if (true? (gr:mpsk-receiver-cc 0 0 0 0 0 0 0 0 0 0 0))) FIXME: throws

;;; ./general/gr_nlog10_ff.h
;; (pass-if (true? (gr:nlog10-ff 0 0 0))) FIXME: throws

;;; ./general/gr_nop.h
;; (pass-if (true? (gr:nop 0)))  FIXME: throws

;;; ./general/gr_null_sink.h
;; (pass-if (true? (gr:null-sink 0))) FIXME: throws

;;; ./general/gr_null_source.h
;; (pass-if (true? (gr:null-source 0)))v FIXME: throws

;;; ./general/gr_ofdm_bpsk_demapper.h
;; (pass-if (true? (gr:ofdm-bpsk-demapper)))  FIXME: not found

;;; ./general/gr_ofdm_cyclic_prefixer.h
;; (pass-if (true? (gr:ofdm-cyclic-prefixer 0 0))) FIXME: throws

;;; ./general/gr_ofdm_demapper_vcb.h
;; (pass-if (true? (gr:ofdm-mapper-bcv 0 0))) FIXME: throws

;;; ./general/gr_ofdm_frame_acquisition.h
;; gr_ofdm_frame_acquisition (unsigned int occupied_carriers,
;;                              unsigned int fft_length,
;;                              unsigned int cplen,
;;                              const std::vector<gr_complex> &known_symbol, 
;;                              unsigned int max_fft_shift_len);
;; (pass-if (true? (gr:ofdm-frame-acquisition 0 0 0 (0 0) 0)))

;;; ./general/gr_ofdm_frame_sink.h
;; gr_ofdm_frame_sink(const std::vector<gr_complex> &sym_position, 
;;                      const std::vector<unsigned char> &sym_value_out,
;;                      gr_msg_queue_sptr target_queue, unsigned int occupied_tones,
;;                      float phase_gain, float freq_gain);
;; (pass-if (true? (gr:ofdm_frame_sink )))

;;; ./general/gr_ofdm_insert_preamble.h
;; gr_ofdm_insert_preamble(int fft_length,
;;                           const std::vector<std::vector<gr_complex> > &preamble);
;; (pass-if (true? (gr:ofdm-insert-preamble )))

;;; ./general/gr_ofdm_mapper_bcv.h
;; gr_ofdm_mapper_bcv (const std::vector<gr_complex> &constellation,
;;                       unsigned int msgq_limit,
;;                       unsigned int bits_per_symbol,
;;                       unsigned int fft_length);
;; (pass-if (true? (gr:ofdm-mapper-bcv )))

;;; ./general/gr_ofdm_sampler.h
;; (pass-if (true? (gr:ofdm-sampler 0 0 0))) FIXME: throws

;;; ./general/gr_pa_2x2_phase_combiner.h
(pass-if (true? (gr:pa-2x2-phase-combiner)))

;;; ./general/gr_packet_sink.h
;; (pass-if (true? gr_make_packet_sink (const std::vector<unsigned char>& sync_vector,
;;                      gr_msg_queue_sptr target_queue,
;;                      int threshold = -1        // -1 -> use default
;;                      );
;; (gr:packet-sink )))

;;; ./general/gr_peak_detector2_fb.h
(pass-if (true? (gr:peak-detector2-fb 0 0 0)))

;;; ./general/gr_phase_modulator_fc.h
(pass-if (true? (gr:phase-modulator-fc 0)))

;;; ./general/gr_pll_carriertracking_cc.h
(pass-if (true? (gr:pll-carriertracking-cc 0 0 0 0)))

;;; ./general/gr_pll_freqdet_cf.h
(pass-if (true? (gr:pll-freqdet-cf 0 0 0 0)))

;;; ./general/gr_pll_refout_cc.h
(pass-if (true? (gr:pll-refout-cc 0 0 0 0)))

;;; ./general/gr_pn_correlator_cc.h
;; (pass-if (true? (gr:pn-correlator-cc 0 0 0))) FIXME: throws

;;; ./general/gr_probe_avg_mag_sqrd_c.h
(pass-if (true? (gr:probe-avg-mag-sqrd-c 0 0)))

;;; ./general/gr_probe_avg_mag_sqrd_cf.h
(pass-if (true? (gr:probe-avg-mag-sqrd-cf 0 0)))

;;; ./general/gr_probe_avg_mag_sqrd_f.h
(pass-if (true? (gr:probe-avg-mag-sqrd-f 0 0)))

;;; ./general/gr_probe_density_b.h
(pass-if (true? (gr:probe-density-b 0)))

;;; ./general/gr_probe_mpsk_snr_c.h
(pass-if (true? (gr:probe-mpsk-snr-c 0)))

;;; ./general/gr_probe_signal_f.h
(pass-if (true? (gr:probe-signal-f)))

;;; ./general/gr_pwr_squelch_cc.h
;; (pass-if (true? (gr:pwr-squelch-cc 0 0 0 0))) FIXME: not found

;;; ./general/gr_pwr_squelch_ff.h
;; (pass-if (true? (gr:pwr-squelch-ff 0.0 0.0 0 false)))  FIXME: not found

;;; ./general/gr_quadrature_demod_cf.h
(pass-if (true? (gr:quadrature-demod-cf 0)))

;;; ./general/gr_rail_ff.h
(pass-if (true? (gr:rail-ff 0 0)))

;;; ./general/gr_regenerate_bb.h
(pass-if (true? (gr:regenerate-bb 0 0)))

;;; ./general/gr_repeat.h
;; (pass-if (true? (gr:repeat 0 0))) FIXME: throws

;;; ./general/gr_rms_cf.h
(pass-if (true? (gr:rms-cf 0)))

;;; ./general/gr_rms_ff.h
(pass-if (true? (gr:rms-ff 0)))

;;; ./general/gr_scrambler_bb.h
(pass-if (true? (gr:scrambler-bb 0 0 0)))

;;; ./general/gr_short_to_float.h
(pass-if (true? (gr:short-to-float)))

;;; ./general/gr_simple_correlator.h
(pass-if (true? (gr:simple-correlator 0)))

;;; ./general/gr_simple_framer.h
(pass-if (true? (gr:simple-framer 0)))

;;; ./general/gr_simple_squelch_cc.h
(pass-if (true? (gr:simple-squelch-cc 0 0)))

;;; ./general/gr_skiphead.h
;; (pass-if (true? (gr:skiphead 0 0))) FIXME: throws

;;; ./general/gr_squash_ff.h
;; gr_squash_ff_sptr gr_make_squash_ff(const std::vector<float> &igrid,
;;                                     const std::vector<float> &ogrid);
;; (pass-if (true? (gr:squash_ff )))

;;; ./general/gr_squelch_base_cc.h
;; (pass-if (true? (gr:squelch-base-cc "foo" 0 false))) FIXME: not found

;;; ./general/gr_squelch_base_ff.h
;; (pass-if (true? (gr:squelch-base-ff "foo" 0 false))) FIXME: not found

;;; ./general/gr_stream_mux.h
;; gr_make_stream_mux (size_t itemsize,
;;              const std::vector<int> &lengths);
;; (pass-if (true? (gr:stream_mux )))

;;; ./general/gr_stream_to_streams.h
;; (pass-if (true? (gr:stream-to-streams 0 0))) FIXME: throws

;;; ./general/gr_stream_to_vector.h
;; (pass-if (true? (gr:stream-to-vector 0 0))) FIXME: throws

;;; ./general/gr_streams_to_stream.h
;; (pass-if (true? (gr:streams-to-stream 0 0))) FIXME: throws

;;; ./general/gr_streams_to_vector.h
;; (pass-if (true? (gr:streams-to-vector 0 0))) FIXME: throws

;;; ./general/gr_stretch_ff.h
;; (pass-if (true? (gr:stretch-ff 0 0))) FIXME: throws

;;; ./general/gr_test.h
(pass-if (true? (gr:test "foo" 1 1 1 1 1 1 1 1)))

;;; ./general/gr_threshold_ff.h
(pass-if (true? (gr:threshold-ff 0 0)))

;;; ./general/gr_throttle.h
;; (pass-if (true? (gr:throttle 0 0)))  FIXME: throws

;;; ./general/gr_uchar_to_float.h
(pass-if (true? (gr:uchar-to-float)))

;;; ./general/gr_vco_f.h
(pass-if (true? (gr:vco-f 0 0 0)))

;;; ./general/gr_vector_to_stream.h
;; (pass-if (true? (gr:vector-to-stream 0 0))) FIXME: throws

;;; ./general/gr_vector_to_streams.h
;; (pass-if (true? (gr:vector-to-streams 0 0))) FIXME: throws

;;; ./general/gr_wavelet_ff.h
;; (pass-if (true? (gr:wavelet-ff 0 0))) FIXME: throws

;;; ./general/gr_wvps_ff.h
;; (pass-if (true? (gr:wvps_ff 0))) FIXME: throws
