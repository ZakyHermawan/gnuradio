/* -*- c++ -*- */
/*
 * Copyright 2010 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * WARNING: This file is automatically generated by generate_gr_fir_XXX.py
 * Any changes made to this file will be overwritten.
 */


#ifndef INCLUDED_GRI_FIR_FILTER_WITH_BUFFER_H
#define INCLUDED_GRI_FIR_FILTER_WITH_BUFFER_H

#include <vector>
#include <gr_types.h>
#include <gr_reverse.h>
#include <string.h>

/*!
 * \brief FIR with internal buffer for gr_complex input, 
          gr_complex output and float taps
 * \ingroup filter
 * 
 */

class gri_fir_filter_with_buffer_ccf {

protected:
  std::vector<float>	d_taps;		// reversed taps
  gr_complex           *d_buffer;
  unsigned int          d_idx;

public:

  // CONSTRUCTORS

  /*!
   * \brief construct new FIR with given taps.
   *
   * Note that taps must be in forward order, e.g., coefficient 0 is
   * stored in new_taps[0], coefficient 1 is stored in
   * new_taps[1], etc.
   */
  gri_fir_filter_with_buffer_ccf (const std::vector<float> &taps);

  ~gri_fir_filter_with_buffer_ccf ();

  // MANIPULATORS

  /*!
   * \brief compute a single output value.
   *
   * \p input must have ntaps() valid entries.
   * input[0] .. input[ntaps() - 1] are referenced to compute the output value.
   *
   * \returns the filtered input value.
   */
  gr_complex filter (gr_complex input);

  /*!
   * \brief compute an array of N output values.
   *
   * \p input must have (n - 1 + ntaps()) valid entries.
   * input[0] .. input[n - 1 + ntaps() - 1] are referenced to compute the output values.
   */
  void filterN (gr_complex output[], const gr_complex input[],
		unsigned long n);

  /*!
   * \brief compute an array of N output values, decimating the input
   *
   * \p input must have (decimate * (n - 1) + ntaps()) valid entries.
   * input[0] .. input[decimate * (n - 1) + ntaps() - 1] are referenced to 
   * compute the output values.
   */
  void filterNdec (gr_complex output[], const gr_complex input[],
		   unsigned long n, unsigned decimate);

  /*!
   * \brief install \p new_taps as the current taps.
   */
  void set_taps (const std::vector<float> &taps)
  {
    d_taps = gr_reverse(taps);
    //d_taps = (taps);

    if(d_buffer != NULL)
      free(d_buffer);
    
    // FIXME: memalign this to 16-byte boundaries for SIMD later
    d_buffer = (gr_complex*)malloc(sizeof(gr_complex) * 2 * d_taps.size());
    memset(d_buffer, 0x00, sizeof(gr_complex) * 2 * d_taps.size());
    d_idx = 0;
  }

  // ACCESSORS

  /*!
   * \return number of taps in filter.
   */
  unsigned ntaps () const { return d_taps.size (); }

  /*!
   * \return current taps
   */
  const std::vector<float> get_taps () const
  {
    return gr_reverse(d_taps);
  }
};

#endif /* INCLUDED_GR_GR_FIR_FILTER_WITH_BUFFER_CCF_H */
