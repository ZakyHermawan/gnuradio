#!/usr/bin/env python
#
# Copyright 2004,2010 Free Software Foundation, Inc.
# 
# This file is part of GNU Radio
# 
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
# 

from gnuradio import gr, gr_unittest
import math

class test_pll_refout (gr_unittest.TestCase):

    def setUp (self):
        self.tb = gr.top_block()

    def tearDown (self):
        self.tb = None

    def test_pll_refout (self):
        expected_result = ((1+0j),
                           (1+7.39965699825e-10j),
                           (0.999980390072+0.00626518437639j),
                           (0.999828696251+0.0185074303299j),
                           (0.999342679977+0.0362518914044j),
                           (0.998255133629+0.0590478256345j),
                           (0.996255218983+0.0864609181881j),
                           (0.993005692959+0.118066303432j),
                           (0.988157629967+0.153442293406j),
                           (0.981362581253+0.192165210843j),
                           (0.972283244133+0.233806177974j),
                           (0.960601866245+0.277928203344j),
                           (0.946027696133+0.324085712433j),
                           (0.928303182125+0.371824204922j),
                           (0.907292485237+0.420500129461j),
                           (0.882742881775+0.469856321812j),
                           (0.854515135288+0.519426465034j),
                           (0.822515428066+0.568742752075j),
                           (0.786696374416+0.617340147495j),
                           (0.747057676315+0.664759278297j),
                           (0.703645706177+0.710551023483j),
                           (0.656552672386+0.754280149937j),
                           (0.605915188789+0.795529305935j),
                           (0.551911652088+0.833902597427j),
                           (0.494760125875+0.869029581547j),
                           (0.43471467495+0.900568246841j),
                           (0.37224906683+0.928132891655j),
                           (0.307677358389+0.95149075985j),
                           (0.241136670113+0.970491170883j),
                           (0.17298206687+0.984924972057j),
                           (0.103586681187+0.99462044239j),
                           (0.0333374515176+0.999444127083j),
                           (-0.0373689383268+0.999301552773j),
                           (-0.108129791915+0.994136810303j),
                           (-0.178540587425+0.983932554722j),
                           (-0.248198464513+0.968709230423j),
                           (-0.316705435514+0.948523938656j),
                           (-0.383672863245+0.92346906662j),
                           (-0.448723107576+0.893670797348j),
                           (-0.511321544647+0.859389483929j),
                           (-0.571328163147+0.820721685886j),
                           (-0.628419756889+0.777874410152j),
                           (-0.682292759418+0.731079041958j),
                           (-0.73266518116+0.680589199066j),
                           (-0.779277086258+0.626679480076j),
                           (-0.821892678738+0.569642364979j),
                           (-0.860300958157+0.509786486626j),
                           (-0.894316911697+0.447434008121j),
                           (-0.923782110214+0.382918506861j),
                           (-0.948564827442+0.316582858562j),
                           (-0.968560934067+0.248776495457j),
                           (-0.983657181263+0.180051460862j),
                           (-0.993847966194+0.110752984881j),
                           (-0.999158382416+0.0410190448165j),
                           (-0.999585151672-0.0288016609848j),
                           (-0.995150506496-0.0983637422323j),
                           (-0.985901653767-0.167325690389j),
                           (-0.971909880638-0.235353350639j),
                           (-0.953269898891-0.302119880915j),
                           (-0.930099308491-0.367308050394j),
                           (-0.902536988258-0.430612236261j),
                           (-0.870742440224-0.491739332676j),
                           (-0.834894299507-0.550410330296j),
                           (-0.795189321041-0.606361210346j),
                           (-0.751972556114-0.659194409847j),
                           (-0.705345034599-0.708864152431j),
                           (-0.65554022789-0.755160212517j),
                           (-0.602804005146-0.79788929224j),
                           (-0.547393083572-0.836875617504j),
                           (-0.489574193954-0.871961593628j),
                           (-0.429622590542-0.903008520603j),
                           (-0.367820799351-0.929896712303j),
                           (-0.30445766449-0.952525854111j),
                           (-0.239826664329-0.970815718174j),
                           (-0.174224823713-0.984705924988j),
                           (-0.107951194048-0.994156181812j),
                           (-0.0415062084794-0.999138236046j),
                           (0.0248276274651-0.999691724777j),
                           (0.0909758731723-0.995853126049j),
                           (0.156649366021-0.987654268742j),
                           (0.221562758088-0.975146114826j),
                           (0.285434871912-0.958398103714j),
                           (0.34799093008-0.937497913837j),
                           (0.408963024616-0.912550985813j),
                           (0.468091547489-0.883679986j),
                           (0.525126516819-0.851024150848j),
                           (0.579828321934-0.814738690853j),
                           (0.631969094276-0.774993598461j),
                           (0.68133354187-0.731973052025j),
                           (0.727582633495-0.68602001667j),
                           (0.770699501038-0.637198805809j),
                           (0.810512304306-0.585721611977j),
                           (0.846863090992-0.531810939312j),
                           (0.879608631134-0.475698083639j),
                           (0.908620357513-0.417623102665j),
                           (0.933785498142-0.357833325863j),
                           (0.955007135868-0.29658266902j),
                           (0.972205162048-0.23413066566j),
                           (0.985315918922-0.170741200447j),
                           (0.994293212891-0.106681533158j))

        sampling_freq = 10e3
        freq = sampling_freq / 100

        alpha = 0.1
        beta = alpha * alpha / 4.0
        maxf = 1
        minf = -1

        src = gr.sig_source_c (sampling_freq, gr.GR_COS_WAVE, freq, 1.0)
        pll = gr.pll_refout_cc(alpha, beta, maxf, minf)
        head = gr.head (gr.sizeof_gr_complex, int (freq))
        dst = gr.vector_sink_c ()

        self.tb.connect (src, pll, head)
        self.tb.connect (head, dst)

        self.tb.run ()
        dst_data = dst.data ()

        self.assertComplexTuplesAlmostEqual (expected_result, dst_data, 5)

if __name__ == '__main__':
    gr_unittest.run(test_pll_refout, "test_pll_refout.xml")
