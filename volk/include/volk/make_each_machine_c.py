#
# Copyright 2010 Free Software Foundation, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

from volk_regexp import *
import string
from emit_omnilog import *

#ok todo list:
#put n_archs into the info struct so it doesn't have to be arch_defs[0].

def make_each_machine_c(machine_name, archs, functions, fcountlist, taglist):
    tempstring = r"""
// This file is automatically generated by make_each_machine_c.py.
// Do not edit this file.
"""
    for arch in archs:
        tempstring += "#define LV_HAVE_" + arch.swapcase() + " 1\n"
    
    tempstring += """
#include <volk_common.h>
#include <volk_machines.h>
#include <volk_registry.h>

"""
    for func in functions:
        tempstring += "#include <volk/" + func + ".h>\n"
    tempstring += "\n\n"
    
    tempstring += emit_prolog();
    
    for i in range(len(functions)):
        tempstring += "static const " + replace_volk.sub("p", functions[i]) + " " + functions[i] + "_archs[] = {\n"

        tags_counter = 0
        for arch_list in fcountlist[i]:
            ok = True
            for arch in arch_list:
                if arch.swapcase() not in archs:
                    ok = False
            if ok:
                tempstring += "      " + functions[i] + "_" + str(taglist[i][tags_counter]) + ",\n"
            tags_counter += 1

        tempstring = strip_trailing(tempstring, ",")
        tempstring += "};\n\n"
        
        
    tempstring += "static unsigned int caps = "
    for arch in archs:
        tempstring += "(1 << LV_" + arch.swapcase() + ") + "
    tempstring = strip_trailing(tempstring, " + ")
    tempstring += ";\n"
    
    tempstring += "static const char* name = \"" + machine_name + "\";\n"
    tempstring += "struct volk_machine volk_machine_" + machine_name + " = {\n"
    tempstring += "    caps,\n"
    tempstring += "    name,\n"
    
    for i in range(len(functions)):
        tempstring += "    { " + functions[i] + "_indices, " + functions[i] + "_arch_defs },\n"
        tempstring += "    " + functions[i] + "_archs,\n"
    
    tempstring = strip_trailing(tempstring, ",")
    tempstring += "};\n"
    tempstring += emit_epilog();
        
    return tempstring


